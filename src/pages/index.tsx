import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import React, { ReactElement } from 'react';
import { signIn, signOut, useSession } from "next-auth/react";
import Typed from 'typed.js';


import { trpc } from "../utils/trpc";
import Layout from "../components/layout";

const Home: NextPage = () => {
  const hello = trpc.example.hello.useQuery({ text: "from tRPC" });

  return (
    <>
      <Head>
        <title>Poll</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex min-h-screen flex-col  p-4">
        <WelcomeMessage />
        <div className="text-4xl font-bold">Public Polls</div>
        <div className="text-gray-400 text-sm">Below are the public polls created by Fast Poll members</div>
        <div className="mt-8">
          <div className="shadow-lg border-white shadow-gray-500 p-8 relative">
            <div className="absolute top-0 -mt-4 -mr-4 right-0 rounded-full border-2 border-green-400 bg-green-100 text-green-800 font-bold text-xs py-1 px-4">85 Votes</div>
            <div className="flex flex-col gap-2">
              <div className="flex">
                <div className="bg-blue-300 text-xs uppercase px-2 p-1 rounded-full text-blue-800 font-bold">HEALTHCARE</div>
              </div>
              <div className="text-2xl font-bold">Title</div>
              <div className="text-gray-400 text-sm">About 3 hours ago</div>
            </div>
          </div>
        </div>
        {/* <AuthShowcase /> */}
      </main>

    </>
  );
};



const WelcomeMessage = () => {
  // Create reference to store the DOM element containing the animation
  const el = React.useRef(null);

  React.useEffect(() => {
    const typed = new Typed(el.current, {
      strings: ['free', 'work', 'fun', 'feedback', 'engagement'],
      typeSpeed: 150,
      showCursor: false,
      loop: true
    });

    return () => {
      // Destroy Typed instance during cleanup to stop animation
      typed.destroy();
    };
  }, []);
  return <div className="text-6xl font-semibold text-center">
    Create instant, real-time <br /><span className="text-green-400">polls</span> for &nbsp;

    <span className="relative">
      <span ref={el} />
      <span className="h-2 rotate-[357deg] -mb-2 absolute bottom-0 left-0 right-0 bg-yellow-100 w-full "></span>
    </span>
  </div>;
}


const AuthShowcase: React.FC = () => {
  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery();

  const { data: sessionData } = useSession();

  return (
    <div className="flex flex-col items-center justify-center gap-2">
      {sessionData && (
        <p className="text-2xl text-blue-500">
          Logged in as {sessionData?.user?.name}
        </p>
      )}
      {secretMessage && (
        <p className="text-2xl text-blue-500">{secretMessage}</p>
      )}
      <button
        className="rounded-md border border-black bg-violet-50 px-4 py-2 text-xl shadow-lg hover:bg-violet-100"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};


Home.getLayout = function getLayout(page: ReactElement) {
  return (
    <Layout>
      {page}
    </Layout>
  )
}

export default Home;
